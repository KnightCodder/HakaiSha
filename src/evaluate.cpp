#include "structure.h"

const double coefficients[12][64] = {
    {// White Pawn
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
     0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05,
     0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
     0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {// White Knight
     -0.5, -0.3, -0.2, -0.2, -0.2, -0.2, -0.3, -0.5,
     -0.3, -0.1, 0.0, 0.0, 0.0, 0.0, -0.1, -0.3,
     -0.2, 0.0, 0.05, 0.05, 0.05, 0.05, 0.0, -0.2,
     -0.2, 0.05, 0.1, 0.1, 0.1, 0.1, 0.05, -0.2,
     -0.2, 0.05, 0.1, 0.1, 0.1, 0.1, 0.05, -0.2,
     -0.2, 0.0, 0.05, 0.05, 0.05, 0.05, 0.0, -0.2,
     -0.3, -0.1, 0.0, 0.0, 0.0, 0.0, -0.1, -0.3,
     -0.5, -0.3, -0.2, -0.2, -0.2, -0.2, -0.3, -0.5},
    {// White Bishop
     -0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2,
     -0.1, 0.05, 0.0, 0.0, 0.0, 0.0, 0.05, -0.1,
     -0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0.1, -0.1,
     -0.1, 0.0, 0.05, 0.05, 0.05, 0.05, 0.0, -0.1,
     -0.1, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1, -0.1,
     -0.1, 0.05, 0.1, 0.05, 0.05, 0.1, 0.05, -0.1,
     -0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
     -0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2},
    {// White Rook
     0.0, 0.0, 0.0, 0.05, 0.05, 0.0, 0.0, 0.0,
     0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.1,
     -0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05,
     -0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05,
     -0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05,
     -0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05,
     -0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05,
     0.0, 0.0, 0.0, 0.05, 0.05, 0.0, 0.0, 0.0},
    {// White Queen
     -0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2,
     -0.1, 0.0, 0.0, 0.0, 0.0, 0.05, 0.0, -0.1,
     -0.1, 0.0, 0.05, 0.05, 0.05, 0.05, 0.0, -0.1,
     -0.05, 0.0, 0.05, 0.05, 0.05, 0.05, 0.0, -0.05,
     0.0, 0.0, 0.05, 0.05, 0.05, 0.05, 0.0, -0.05,
     -0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0.0, -0.1,
     -0.1, 0.0, 0.05, 0.0, 0.0, 0.0, 0.0, -0.1,
     -0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2},
    {// White King (middle game)
     -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
     -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
     -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
     -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
     -0.2, -0.3, -0.3, -0.4, -0.4, -0.3, -0.3, -0.2,
     -0.1, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.1,
     0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.2, 0.2,
     0.2, 0.3, 0.1, 0.0, 0.0, 0.1, 0.3, 0.2},
    {// Black Pawn
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1,
     -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05,
     -0.02, -0.02, -0.02, -0.02, -0.02, -0.02, -0.02, -0.02,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01,
     -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05,
     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {// Black Knight
     0.5, 0.3, 0.2, 0.2, 0.2, 0.2, 0.3, 0.5,
     0.3, 0.1, 0.0, 0.0, 0.0, 0.0, 0.1, 0.3,
     0.2, 0.0, -0.05, -0.05, -0.05, -0.05, 0.0, 0.2,
     0.2, -0.05, -0.1, -0.1, -0.1, -0.1, -0.05, 0.2,
     0.2, -0.05, -0.1, -0.1, -0.1, -0.1, -0.05, 0.2,
     0.2, 0.0, -0.05, -0.05, -0.05, -0.05, 0.0, 0.2,
     0.3, 0.1, 0.0, 0.0, 0.0, 0.0, 0.1, 0.3,
     0.5, 0.3, 0.2, 0.2, 0.2, 0.2, 0.3, 0.5},
    {// Black Bishop
     0.2, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.2,
     0.1, -0.05, 0.0, 0.0, 0.0, 0.0, -0.05, 0.1,
     0.1, -0.1, -0.05, -0.05, -0.05, -0.05, -0.1, 0.1,
     0.1, 0.0, -0.05, -0.05, -0.05, -0.05, 0.0, 0.1,
     0.1, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, 0.1,
     0.1, -0.05, -0.1, -0.05, -0.05, -0.1, -0.05, 0.1,
     0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
     0.2, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.2},
    {// Black Rook
     0.0, 0.0, 0.0, -0.05, -0.05, 0.0, 0.0, 0.0,
     -0.1, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.1,
     0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05,
     0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05,
     0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05,
     0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05,
     0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05,
     0.0, 0.0, 0.0, -0.05, -0.05, 0.0, 0.0, 0.0},
    {// Black Queen
     0.2, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.2,
     0.1, 0.0, 0.0, 0.0, 0.0, -0.05, 0.0, 0.1,
     0.1, 0.0, -0.05, -0.05, -0.05, -0.05, 0.0, 0.1,
     0.05, 0.0, -0.05, -0.05, -0.05, -0.05, 0.0, 0.05,
     0.0, 0.0, -0.05, -0.05, -0.05, -0.05, 0.0, 0.05,
     0.1, -0.05, -0.05, -0.05, -0.05, -0.05, 0.0, 0.1,
     0.1, 0.0, -0.05, 0.0, 0.0, 0.0, 0.0, 0.1,
     0.2, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.2},
    {// Black King (middle game)
     0.3, 0.4, 0.4, 0.5, 0.5, 0.4, 0.4, 0.3,
     0.3, 0.4, 0.4, 0.5, 0.5, 0.4, 0.4, 0.3,
     0.3, 0.4, 0.4, 0.5, 0.5, 0.4, 0.4, 0.3,
     0.3, 0.4, 0.4, 0.5, 0.5, 0.4, 0.4, 0.3,
     0.2, 0.3, 0.3, 0.4, 0.4, 0.3, 0.3, 0.2,
     0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.1,
     -0.2, -0.2, 0.0, 0.0, 0.0, 0.0, -0.2, -0.2,
     -0.2, -0.3, -0.1, 0.0, 0.0, -0.1, -0.3, -0.2}};

const double intercept = 0;

double ChessBoard::evaluateBoard() const
{
    if (isThreefoldRepetition())
        return 0;
    if (fiftyMoves.top() > 100)
        return 0;

    double score = 0;

    for (int i = 0; i < 64; ++i)
    {
        if (board[i].piece == EMPTY)
            continue;
        score += coefficients[(board[i].color - 1) * 6 + (board[i].piece - 1)][i] + pieceValues[board[i].piece] * colorValues[board[i].color] * 100;
    }

    score += intercept;

    return score;
}
